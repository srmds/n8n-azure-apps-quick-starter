parameters:
  - name: azureSubscription
    type: string
  - name: resourceGroupName
    type: string
  - name: environmentName
    type: string
  - name: containerAppName
    type: string
  - name: postgresServerName
    type: string
  - name: postgresAdminUsername
    type: string
  - name: postgresAdminPassword
    type: string
    default: ''
  - name: n8nEncryptionKey
    type: string
    default: ''
  - name: templateFilePath
    type: string
    default: 'infrastructure/main.bicep'
  - name: buildId
    type: string
  - name: dryRun
    type: string
    default: 'true'
  - name: containerCpu
    type: string
    default: '0.5'
  - name: containerMemory
    type: string
    default: '1Gi'
  - name: minReplicas
    type: string
    default: '0'
  - name: maxReplicas
    type: string
    default: '1'
  - name: keyVaultName
    type: string
  - name: n8nImage
    type: string
    default: 'docker.io/n8nio/n8n:latest'
steps:
  - task: AzureCLI@2
    displayName: 'Build Bicep files'
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        az --version && az bicep upgrade
        az bicep build --file ${{ parameters.templateFilePath }}
  - task: AzureCLI@2
    displayName: 'Validate Bicep files'
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        az deployment group validate \
        --resource-group ${{ parameters.resourceGroupName }} \
        --template-file ${{ parameters.templateFilePath }} \
        --parameters buildId='${{ parameters.buildId }}' environmentName='${{ parameters.environmentName }}' containerAppName='${{ parameters.containerAppName }}' postgresServerName='${{ parameters.postgresServerName }}' postgresAdminUsername='${{ parameters.postgresAdminUsername }}' postgresAdminPassword='${{ parameters.postgresAdminPassword }}' containerCpu='${{ parameters.containerCpu }}' containerMemory='${{ parameters.containerMemory }}' minReplicas=${{ parameters.minReplicas }} maxReplicas=${{ parameters.maxReplicas }} n8nImage='${{ parameters.n8nImage }}' n8nEncryptionKey='${{ parameters.n8nEncryptionKey }}' keyVaultName='${{ parameters.keyVaultName }}' \
        --name ${{ parameters.buildId }} --debug
  - task: AzureCLI@2
    displayName: 'Dry-run Bicep files (what-if on resource group level)'
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        az deployment group what-if \
        --resource-group ${{ parameters.resourceGroupName }} \
        --parameters buildId='${{ parameters.buildId }}' environmentName='${{ parameters.environmentName }}' containerAppName='${{ parameters.containerAppName }}' postgresServerName='${{ parameters.postgresServerName }}' postgresAdminUsername='${{ parameters.postgresAdminUsername }}' postgresAdminPassword='${{ parameters.postgresAdminPassword }}' containerCpu='${{ parameters.containerCpu }}' containerMemory='${{ parameters.containerMemory }}' minReplicas=${{ parameters.minReplicas }} maxReplicas=${{ parameters.maxReplicas }} n8nImage='${{ parameters.n8nImage }}' n8nEncryptionKey='${{ parameters.n8nEncryptionKey }}' keyVaultName='${{ parameters.keyVaultName }}' \
        --template-file ${{ parameters.templateFilePath }} \
        --result-format FullResourcePayloads --debug
  - task: AzureCLI@2
    displayName: 'Provision n8n infrastructure'
    condition: eq(${{ parameters.dryRun }}, 'false')
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        az deployment group create \
        --resource-group ${{ parameters.resourceGroupName }} \
        --mode 'Incremental' \
        --parameters buildId='${{ parameters.buildId }}' environmentName='${{ parameters.environmentName }}' containerAppName='${{ parameters.containerAppName }}' postgresServerName='${{ parameters.postgresServerName }}' postgresAdminUsername='${{ parameters.postgresAdminUsername }}' postgresAdminPassword='${{ parameters.postgresAdminPassword }}' containerCpu='${{ parameters.containerCpu }}' containerMemory='${{ parameters.containerMemory }}' minReplicas=${{ parameters.minReplicas }} maxReplicas=${{ parameters.maxReplicas }} n8nImage='${{ parameters.n8nImage }}' n8nEncryptionKey='${{ parameters.n8nEncryptionKey }}' keyVaultName='${{ parameters.keyVaultName }}' \
        --template-file ${{ parameters.templateFilePath }} \
        --rollback-on-error --debug
  - task: AzureCLI@2
    displayName: 'Get Deployment Outputs'
    condition: eq(${{ parameters.dryRun }}, 'false')
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        # Get deployment outputs
        DEPLOYMENT_OUTPUT=$(az deployment group show \
          --resource-group ${{ parameters.resourceGroupName }} \
          --name ${{ parameters.buildId }} \
          --query properties.outputs \
          --output json)
        
        echo "##vso[task.setvariable variable=containerAppUrl;isOutput=true]$(echo $DEPLOYMENT_OUTPUT | jq -r '.containerAppUrl.value')"
        echo "##vso[task.setvariable variable=postgresServerFqdn;isOutput=true]$(echo $DEPLOYMENT_OUTPUT | jq -r '.postgresServerFqdn.value')"
        
        echo "Deployment completed successfully!"
        # echo "Container App URL: $(echo $DEPLOYMENT_OUTPUT | jq -r '.containerAppUrl.value')"
        # echo "PostgreSQL Server: $(echo $DEPLOYMENT_OUTPUT | jq -r '.postgresServerFqdn.value')"
        
        # Show Key Vault info if used
        if [ ! -z "${{ parameters.keyVaultName }}" ]; then
          echo "Password stored in Key Vault: ${{ parameters.keyVaultName }}"
          echo "Secret name: postgres-password-${{ parameters.environmentName }}"
        fi 